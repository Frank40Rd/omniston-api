syntax = "proto3";

package omni.v1alpha1;

import "omni/v1alpha1/types.proto";

// Request for quote (RFQ) sent by the trader
message QuoteRequest {
  // The blockchain of offer asset.
  Blockchain offer_blockchain = 1;

  // Blockchain-specific address of offer asset.
  string offer_asset_address = 2;

  // The blockchain of ask asset.
  Blockchain ask_blockchain = 3;

  // Blockchain-specific address of ask asset.
  string ask_asset_address = 4;

  // Either the amount of offer asset or ask asset.
  oneof amount {
    // The amount of offer asset the trader wants to pay, including all fees.
    string offer_units = 5;
    // The amount of ask asset the trader wants to get after all fees.
    string ask_units = 6;
  }

  // The address of referrer that will receive the fees.
  string referrer_address = 7;

  // The amount of fees required by the referrer in basis points (1/10000 or 0.01%)
  uint32 referrer_fee_bps = 8;

  // The method of swap settlement. Different combinations of offer & ask chains might support different methods.
  SettlementMethod settlement_method = 9;
}

// Settlement parameters specific to `ESCROW` settlement method.
message EscrowParams {
  // Address of escrow contract that enforces the swap.
  string escrow_address = 1;

  // Address of the resolver.
  string resolver_address = 2;

  // Max timestamp (UTC seconds) of deposit of offer asset by the trader.
  sint64 deposit_deadline = 3;

  // Duration in seconds after the deposit of offer asset to complete the trade.
  // The trader can return the deposit as soon as the timeout elapses.
  sint64 resolve_timeout = 4;
}

// Settlement parameters specific to `ATOMIC` settlement method.
message AtomicParams {
  // TODO: Define
}

//
message QuoteResponse {
  // ID of the quote generated by the platform
  string quote_id = 1;

  // The blockchain of offer asset.
  Blockchain offer_blockchain = 2;

  // Blockchain-specific address of offer asset.
  string offer_asset_address = 3;

  // The blockchain of ask asset.
  Blockchain ask_blockchain = 4;

  // Blockchain-specific address of ask asset.
  string ask_asset_address = 5;

  // The amount of offer asset the trader must pay, including all fees.
  string offer_units = 6;

  // The amount of ask asset the trader will get after all fees.
  string ask_units = 7;

  // The address of referrer that will receive the fees.
  string referrer_address = 8;

  // The amount of fees that the referrer will get (in units of `offer_asset_address`).
  string referrer_fee_units = 9;

  // The amount of fees charged by the protocol (in units of `offer_asset_address`).
  string protocol_fee_units = 10;

  // Additional parameters specific to settlement method.
  oneof swap_params {
    EscrowParams escrow = 11;
    AtomicParams atomic = 12;
  }
}

service TraderGrpc {
  // Request for quote.
  //
  // The server sends the stream of quotes in response, so that each next quote overrides previous one.
  // This may occur either because the newer quote has better terms or because the older has expired.
  //
  // If there are no resolvers providing quotes for this request, empty stream is returned.
  // If there are no resolvers providing quotes after an old quote has expired, the server sends an empty
  // message (empty `qoute_id` & other fields).
  //
  // The client is responsible for interrupting connection when not interested in further updates
  // (either when starting the trade or because of cancelling the request).
  rpc Quote(QuoteRequest) returns (stream QuoteResponse) {}
}
