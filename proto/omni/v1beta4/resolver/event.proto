syntax = "proto3";

package omni.v1beta4;

import "omni/v1beta4/types/common.proto";
import "omni/v1beta4/types/quote.proto";

////////////////////////////////////////////////////////////////////
// Resolver events
////////////////////////////////////////////////////////////////////

// Notifies the resolver that the quote has been requested by the trader.
message QuoteRequestedEvent {
  // ID of RFQ generated by the server (SHA-256 hex string)
  string rfq_id = 1;

  // The RFQ received from the trader forwarded as is
  QuoteRequest quote_request = 2;

  // Amounts for resolvers adjusted by fees
  oneof resolver_amount {
    // Amount of `offer_asset_address` that the resolver will get
    string offer_units = 3;
    // Amount of `ask_asset_address` that the resolver will pay
    string ask_units = 4;
  }

  // The timestamp (UTC seconds) of RFQ sent by the trader.
  sint64 request_timestamp = 5;

  // Maximum duration since quote generation before the trader must make valid deposit.
  sint64 quote_validity_timeout = 6;

  // Minimum duration since trader's deposit before the resolver may start settling the trade.
  sint64 deposit_settling_delay = 7;

  // Maximum duration since trader's deposit before the resolver must complete the trade.
  sint64 resolve_timeout = 8;
}

// Notifies the resolver that the RFQ has been cancelled by the trader.
message QuoteRequestCancelledEvent {
  // ID of RFQ from prior `QuoteRequestedEvent` (SHA-256 hex string)
  string rfq_id = 1;
}

// Notifies the resolver that the server accepted the quote sent in `UpdateQuoteRequest`.
//
// The resolver can match `UpdateQuoteRequest` & `QuoteAcceptedEvent` using `seqno` field.
message QuoteAcceptedEvent {
  // ID of quote generated by the server (SHA-256 hex string)
  string quote_id = 1;
}

// Notifies the resolver that the server accepted the quote sent in `UpdateQuoteRequest`.
//
// The resolver can match `UpdateQuoteRequest` & `QuoteRejectedEvent` using `seqno` field.
message QuoteRejectedEvent {
  // TODO: Rejection diagnostics
}

message TransferRequestedEvent {
  // ID of RFQ from prior `QuoteRequestedEvent` (SHA-256 hex string)
  string rfq_id = 1;

  // The valid quote received from `QuoteGrpc`
  Quote quote = 2;
  // The address on `offer_blockchain` that will send initial transaction to start the trade
  Address source_address = 3;
  // The address on `ask_blockchain` that will receive result of the trade
  Address destination_address = 4;
  // Max price slippage in basis points (0.01%)
  int32 max_slippage_bps = 11;
}

// Parameters of a trade settled via escrow contract
message EscrowTradeParams {
  // Address of escrow contract.
  Address contract_address = 1;

  // Index of the deposit within escrow contract.
  uint64 deposit_index = 2;

  // Address of the resolver that should receive tokens offered by the trader.
  Address resolver_offer_address = 3;

  // Address of the resolver that must send tokens asked by the trader.
  Address resolver_ask_address = 4;

  // Address of tokens offered by the trader.
  Address offer_asset_address = 5;

  // Address of tokens asked by the trader.
  Address ask_asset_address = 6;

  // Amount of `offer_asset_address` that the resolver will get
  string resolver_offer_units = 7;

  // Amount of `ask_asset_address` that the resolver will pay
  string resolver_ask_units = 8;

  // Max timestamp (UTC seconds) of trade settlement by the resolver.
  sint64 resolve_deadline = 9;
}

// Parameters of an order settled via HTLC contract
message HtlcTradeParams {
  // Address of HTLC contract.
  Address contract_address = 1;

  // ID of order within HTLC contract.
  uint64 deposit_index = 2;

  // Address of the wallet that should receive tokens offered by the order.
  Address taker_address = 3;

  // Address of tokens offered by the order.
  Address asset_address = 4;

  // Amount of `asset_address` that the taker will get
  string amount_units = 5;

  // Max timestamp (UTC seconds) of trade settlement by the resolver.
  sint64 resolve_deadline = 6;

  // Lock hash or data
  string secret_hash = 7;

}

// Notifies the resolver that the trader has deposited tokens to escrow contract.
message TradeStartedEvent {
  // ID of RFQ generated by the server (SHA-256 hex string).
  string rfq_id = 1;

  // ID of quote generated by the server (SHA-256 hex string).
  string quote_id = 2;

  oneof params {
    EscrowTradeParams escrow = 11;
    HtlcTradeParams htlc = 12;
  }
}

// Notifies the resolver that the trader has disclosed HTLC secret, and it's possible to claim trader's (`offer`) deposit.
message SecretDisclosedEvent {

  // ID of quote generated by the server (SHA-256 hex string).
  string quote_id = 1;
  // Address of HTLC contract within offer blockchain.
  Address contract_address = 2;
  // Index of the offer deposit within a contract.
  uint64 deposit_index = 3;
  // Value of secret to redeem the offer deposit
  string secret = 4;
}

message ResolverEvent {
  // These fields allow multiplexing over a single gRPC stream by matching
  // the requests and corresponding replies sent as `ResolverRequest` & `ResolverEvent`.
  oneof mux {
    // An identifier of event generated by the server.
    // Uniqueness of seqno is only guaranteed within a single connection.
    // When replying to an event, the resolvers must use corresponding `seqno` in `reply_to` field of the reply.
    uint64 seqno = 1;
    // Contains the `seqno` specified in `ResolverRequest` if the event is a reply to a request.
    // Otherwise this field is empty.
    uint64 reply_to = 2;
  }

  // One of resolver's events.
  oneof event {
    QuoteRequestedEvent quote_requested = 10;
    QuoteRequestCancelledEvent quote_request_cancelled = 11;
    QuoteAcceptedEvent quote_accepted = 12;
    QuoteRejectedEvent quote_rejected = 13;
    TransferRequestedEvent transfer_requested = 14;
    TradeStartedEvent trade_started = 20;
    SecretDisclosedEvent secret_disclosed = 21;
    KeepAlive keep_alive = 100;
  }
}
